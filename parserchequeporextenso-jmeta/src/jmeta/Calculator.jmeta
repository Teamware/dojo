public parser Calculator {
    public static void main(String[] args) {
        Calculator parser = new Calculator();
        //parser.tracing = true;
        Object[] ast = (Object[]) parser.parse(args[0]);
        System.out.println(new Interpreter().parse(ast));
    }

    start: ! e=expr . end      { e };
    expr:
        | p=pos l=expr ."+"! r=expr1 { ['ADD, l, r, p] }
        | p=pos l=expr ."-"! r=expr1 { ['SUB, l, r, p] }
        | expr1
    ;
    expr1:
        | p=pos l=expr1 ."*"! r=value { ['MUL, l, r, p] }
        | p=pos l=expr1 ."/"! r=value { ['DIV, l, r, p] }
        | p=pos l=expr1 ."%"! r=value { ['MOD, l, r, p] }
        | value
    ;
    value:
        | ."(" ! e=expr .")" { e }
        | . p=pos n=num              { ['INT, n, p] }
    ;
    num: ds=digit+ { return Integer.parseInt(join(ds)); } ;
}

parser Interpreter {
    start: ! r=_ res=apply(r) end   { res } ;
    val: [ ! r=_ res=apply(r) end ] { res } ;

    ADD l=val r=val _ { return (Integer)l + (Integer)r; } ;
    SUB l=val r=val _ { return (Integer)l - (Integer)r; } ;
    MUL l=val r=val _ { return (Integer)l * (Integer)r; } ;
    DIV l=val r=val _ { return (Integer)l / (Integer)r; } ;
    MOD l=val r=val _ { return (Integer)l % (Integer)r; } ;
    INT v=_ _         { v } ;
}

